internal record TypeModel
{
    internal string[] Usings { get; }
    internal string Namespace { get; }
    internal string[] Keywords { get; }
    internal string Kind { get; }
    internal string Name { get; }
    internal BaseTypeElementModel[] Elements { get; }

    public TypeModel(
        string[] usings,
        string @namespace, 
        string[] keywords, 
        string kind,
        string name, 
        BaseTypeElementModel[] elements)
    {
        Usings = usings;
        Namespace = @namespace;
        Name = name;
        Kind = kind;
        Keywords = keywords;
        Elements = elements;
    }

    public void Build(CodeWriter codeWriter)
    {
        codeWriter.WriteLine("// <auto-generated />");
        foreach (var @using in Usings)
        {
            codeWriter.WriteLine($"using {@using};");
        }
        if (Usings.Length > 0)
        {
            codeWriter.WriteLine();
        }
        codeWriter.StartNamespace(Namespace);
        foreach (var keyword in Keywords)
        {
            codeWriter.Write($"{keyword} ");
        }
        using (codeWriter.CreateScope($"{Kind} {Name}"))
        {
            foreach (var element in Elements)
            {
                element.Build(codeWriter);
            }
        }
        codeWriter.EndNamespace(Namespace);
    }
}