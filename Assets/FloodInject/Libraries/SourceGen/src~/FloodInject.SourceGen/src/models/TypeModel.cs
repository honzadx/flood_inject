using System.Collections.Immutable;

internal record TypeModel(
    ImmutableArray<string> usings,
    string @namespace, 
    ImmutableArray<string> keywords, 
    string kind,
    string name, 
    ImmutableArray<BaseElementModel> elements) : BaseElementModel
{
    internal ImmutableArray<string> usings { get; } = usings;
    public string @namespace { get; } = @namespace;
    public ImmutableArray<string> keywords { get; } = keywords;
    public string kind { get; } = kind;
    public string name { get; } = name;
    public ImmutableArray<BaseElementModel> elements { get; } = elements;

    public override void Build(CodeWriter codeWriter)
    {
        codeWriter.WriteLine("// <auto-generated />");
        foreach (var @using in usings)
        {
            codeWriter.WriteLine($"using {@using};");
        }
        if (usings.Length > 0)
        {
            codeWriter.WriteLine();
        }
        codeWriter.StartNamespace(@namespace);
        foreach (var keyword in keywords)
        {
            codeWriter.Write($"{keyword} ");
        }
        using (codeWriter.CreateScope($"{kind} {name}"))
        {
            foreach (var element in elements)
            {
                element.Build(codeWriter);
            }
        }
        codeWriter.EndNamespace(@namespace);
    }
}