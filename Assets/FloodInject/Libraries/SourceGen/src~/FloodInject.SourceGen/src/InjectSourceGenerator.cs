using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

[Generator]
public class InjectSourceGenerator : IIncrementalGenerator
{
    struct Metadata
    {
        public bool isValid;
        public string @namespace;
        public ClassDeclarationSyntax @class;
        public UsingDirectiveSyntax[] usingDirectives;
        public FieldDeclarationSyntax[] fields;
    }
    
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var provider = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (s, _) => s is ClassDeclarationSyntax,
                transform: static (ctx, _) => Transform(ctx))
            .Where(m => m.isValid);
        
        context.RegisterSourceOutput(provider, Generate);
    }

    private static Metadata Transform(GeneratorSyntaxContext context)
    {
        Metadata metadata = default;

        var syntax = (ClassDeclarationSyntax)context.Node;
        var modifiersValid = syntax.HasModifiers(["public", "partial"]);
        var allFields = syntax.GetChildrenOfType<FieldDeclarationSyntax>().ToArray();
        List<FieldDeclarationSyntax> injectFields = new List<FieldDeclarationSyntax>();
        foreach (var field in allFields)
        {
            if (field.HasAttribute("FloodInject.Runtime.InjectAttribute", context))
            {
                injectFields.Add(field);   
            }
        }
        
        metadata.@class = syntax;
        metadata.@namespace = syntax.GetNamespaceName();
        metadata.usingDirectives = syntax.GetUsingDirectives().ToArray();
        metadata.fields = injectFields.ToArray();
        metadata.isValid = modifiersValid && metadata.fields.Length > 0;
        return metadata;
    }

    private static void Generate(SourceProductionContext context, Metadata metadata)
    {
        using MemoryStream sourceStream = new();
        using StreamWriter sourceStreamWriter = new StreamWriter(sourceStream);
        using CodeWriter codeWriter = new CodeWriter(sourceStreamWriter);

        codeWriter.WriteLine("// <auto-generated />");
        foreach (var usingDirective in metadata.usingDirectives)
        {
            codeWriter.WriteLine(usingDirective.ToFullString());
        }

        string generatedNamespace = string.IsNullOrEmpty(metadata.@namespace) ? "Generated" : metadata.@namespace + ".Generated";
        codeWriter.StartNamespace(generatedNamespace);

        foreach (var modifier in metadata.@class.Modifiers)
        {
            codeWriter.Write(modifier.Text + " ");
        }
        codeWriter.Write(metadata.@class.Keyword.Text + " ");
        
        using (codeWriter.CreateScope(prefix: metadata.@class.Identifier.Text))
        {
            using (codeWriter.CreateScope(prefix: "public readonly System.Type[] typesToInject = new System.Type[]", inlinePostfix: ";"))
            {
                foreach (var field in metadata.fields)
                {
                    codeWriter.WriteLine("typeof(" + field.Declaration.Type + "),");
                }
            }
        }
        
        codeWriter.EndNamespace(generatedNamespace);
        codeWriter.Flush();
        context.AddSource($"{metadata.@class.Identifier.Text}.g.cs", SourceText.From(sourceStream, Encoding.UTF8, canBeEmbedded: true));
    }
}